/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package exercicios_java_sala;
import biblioteca_class_exercicios.Agenda;
import biblioteca_class_exercicios.Contatos;

/**
 *
 * @author ACER
 */

/*
5º Crie uma classe Agenda que armazena informações de contatos. A classe deve ter
métodos para adicionar um contato, remover um contato e imprimir a lista de contatos. 
Escreva um programa em Java que usa a classe Agenda para criar uma agenda telefônica.
*/

/// ARQUIVO - 1

/// FUNCAO PRINCIPAL
/// MOSTRANDO FORMAS DE IMPLEMENTACAO (EM UM CODIGO NAO ESTRUTURADO)
public class Exercicios_Java_Sala4 {
    
    public static void main(String[] args) {
        
        /// INSTANCIANDO OBJETOS DAS CLASSES
        Contatos inforContatos = new Contatos();
        Agenda registros = new Agenda();
        
        /// TRES VARIAVEIS COM DADOS ESPECIFICOS PARA A ACRESCENTAR AO CONTATO
        String nome = "Jonny";
        String email = "gmail.com";
        int numero = 12345678;
        
        /// ATRIBUINDO OS DADOS, FAZENDO A INFORMACAO DE UM CONATO
        inforContatos.setNome(nome);
        inforContatos.setEmail(email);
        inforContatos.setNumero(numero);
       
        /// METODO DE ADICIONAR UM CONTATO A CLASSE DE AGENDA (EM UM VETOR DE CONTATO DA CLASSE)
        registros.addContatos(inforContatos);
        
       /// INSTACIANDO O OBJETO DE CONTATO E ADICIONANDO CADA INSTANCIA AO OBJETO DA CLASSE AGENDA
        inforContatos = new Contatos("Paulo", 929948, "hotmail.com");
        registros.addContatos(inforContatos);
        
        inforContatos = new Contatos("Ana", 21324, "yahoo.com");
        registros.addContatos(inforContatos);
        
        inforContatos = new Contatos("Matheus", 235242, "yahoo.com");
        registros.addContatos(inforContatos);
        
        System.out.println("MINHA LISTA DE CONTATO ==========================\n");
        /// METODO PARA MOSTRA TODOS OS MEUS CONTATOS REGISTRADOS
        registros.displayContatos();
        registros.displayAgentaTell();
        
        System.out.println();
        
        /// VETORES PARA FILTRAR AS INFORMACOES OS QUAIS O USER QUEIRA AGENDAR
        /// E OS QUE QUEIRA AGENDA PRECISA ESTA EXISTENTES A MINHA LISTA DE CONTATO
        String names[] = {"Jonny", "Paulo", "joao", "Ana"};
        int[] vectoNumb = {12345678, 929948, 2342, 21324};
        String email1[] = {"gmail.com", "hotmail.com", "yahoo", "yahoo.com"};
        
        System.out.println("LISTA DA AGENDA TELEFONICA ==========================\n");
        /// INSTANCIANDO A CLASSE AGENDA PARA ATRIBUIR A LISTAGEM DE AGENDAMENTO AO OBJETO
        Agenda agendTelefonica = new Agenda(registros, names, vectoNumb, email1);
        agendTelefonica.displayAgentaTell(); /// METODO PARA MOSTRAR A INFORMACAO DO AGENDAMENTO TELEFONICO
       
        System.out.println();
    }
}


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package biblioteca_class_exercicios;

/**
 *
 * @author ACER
 */

/// ==============================================================================
/// ARQUIVO - 2

/// CLASSE AGENDA - DEFININDO METODOS DE REMOCAO (FORMA DISTINTAS), INSERCAO, IMPRIMIR CONTATOS E FAZER AGENDAMENTO TELEFONICO 
public class Agenda {
    
    /// ATRIBUTOS
    private int tamanho;
    private int chaveContato;
    
    /// DOIS OBJETOS, UM PARA ARMAZENAR OS CONTATOS ADICIONADOS E OUTRO PARA LISTA O AGENDAMENTO TELEFONICO
    private Contatos individuoContato[];
    private Contatos listAgenda[];
    
    /// CONSTRUTOR DE INICIALIZACAO
    public Agenda(){
        
        tamanho = 20; /// TAMANHO MAXIMO DA MINHA AGENDA DE CONTATOS 
        chaveContato = 0;
        individuoContato = new Contatos[tamanho];
    }
    
    /// CONSTRUTOR PARA AGENDAR ME UMA LISTA E INSTANCIAR OBJETOS
    public Agenda(Agenda _obj_Agenda, String _x_nome_person[], int[] _y_numb_person, String _z_email_person[]){
        
        /// OBJETO TEMPORARIO PARA RECEBER AS INFORMACOES DOS QUE O USER QUER AGENDAR
        Contatos agendador;
        listAgenda = new Contatos[_y_numb_person.length]; /// DEFININDO O TAMANHO CONRRESPONDETES AOS QUE O USER QUER AGENDAR
        
        /// FOR PARA PERCORRER TODA A MINHA LISTA DE CONTATO
        for(var i = 0; i < _obj_Agenda.chaveContato; i++){
            
            /// SE POR ACASO O INCREMENTO FOR IGUAL AO TAMANHO DOS AGENDADOS
            if(i >= _y_numb_person.length){
                break;
            }
            
            /// FOR PARA PERCORRER CADA UM DOS AGENDADOS
            for(var j = 0; j < _y_numb_person.length; j++){
                
                /// VERIFICAR SE AS INFORMACOES DA MINHA LISTA DE CONTATO CORRESPONDE AO AGENDADOS
                if( _x_nome_person[j] == _obj_Agenda.individuoContato[i].getNome() &&
                    _y_numb_person[j] == _obj_Agenda.individuoContato[i].getNumero() &&
                    _z_email_person[j] == _obj_Agenda.individuoContato[i].getEmail()){
                    
                    /// INSTANCIANDO O NOVO AGENDADO PARA O OBJETO AGENDADOR
                    agendador = new Contatos(
                            _obj_Agenda.individuoContato[i].getNome(),
                            _obj_Agenda.individuoContato[i].getNumero(),
                            _obj_Agenda.individuoContato[i].getEmail());
                    
                    setAgendaTelefonica(agendador, i); /// PASSANDO O NOVO AGENDADO PARA ATRIBUTIR A LISTA DE AGENDAMENTO TELEFONICO
                 
                }
                
            }
            
        }
        
    }
    
    /// METODOS DA CLASSE
    /// ==========================================================================
    
    /// METODO PARA ADICIONAR UM CONTATO REGISTRADO PELO OBJETO DE ENTRADA
    public void addContatos(Contatos _registra_contato){
        /// SE POR ACASO O TAMANHO DA LISTA DE CONTATO CHEGOU AO SEU LIMITE
        if(chaveContato > tamanho){
            return;
        }
        
        individuoContato[chaveContato] = _registra_contato; /// PASSANDO O CONTATO REGISTRADO PARA A LISTA
        chaveContato++;
    }
    
    /// FILTRANDO O NOME CONSTANTE E REMOVENDO TODOS AQUELES QUE TEM ESSE NOME
    public void removeContatos(String _x_nome_const){
        
        for(var i = 0; i < chaveContato; i++){
            /// VERIFICANDO SE O NOME E IGUAL AO BUSCADO
            if(_x_nome_const.equalsIgnoreCase(individuoContato[i].getNome())){
                chaveContato--;
            }
        }   
    }
    
    /// DETALHE DAS FUNCOES DE REMOVE: SERA DECREMENTANDO A CHAVE DE ACESSO DA INFORMACAO DO CONTATO A SER EXCLUIDO
    /// REMOVENDO O NOME ESPECIFICO COM O NUMERO ASSOCIADO AO NOME
    public void removeContatos(String _x_nome_especific, int _y_numb_contato){
        
        for(var i = 0; i < chaveContato; i++){
            /// VERIFIACANDO SE O NOME E NUMERO E IGUAL AO BUSCADOS
            if(_x_nome_especific.equalsIgnoreCase(individuoContato[i].getNome()) && _y_numb_contato == individuoContato[i].getNumero()){
                chaveContato--;
                break;
            }
        }   
    }
    
    /// IMPRIMIR A LISTA DE CONTATO
    public void displayContatos(){
        
        for(var i = 0; i < chaveContato; i++){
            /// IMFORMACAO: NOME, NUMERO E EMAIL
            System.out.println(individuoContato[i].getNome() + "   " + individuoContato[i].getNumero() + "   " + individuoContato[i].getEmail());
        }
    }
    
    /// METODO PARA MOSTRAR A LISTA DE AGENDAMENTO
    public void displayAgentaTell(){
        
        /// SE A LISTA DE AGENDAMENTO FOR VAZIO, ENTAO NAO REALIZE A OPERACAO DE IMPRESAO
        if(listAgenda != null){
            
            /// PERCORRER TODOS OS MEUS AGENDADOS
            for(var i = 0; i < listAgenda.length; i++){
           
                /// SE O AGENDADO FOR VAZIO, RETORNA AO LOOP
                if(listAgenda[i] == null){
                    continue;
                }
                System.out.println(listAgenda[i].getNome() + "   " + listAgenda[i].getNumero() + "   " + listAgenda[i].getEmail());
            }
        }
    }
    
    /// SET PARA INSERIR O NOVO AGENDADO
    private void setAgendaTelefonica(Contatos _x_contatos_agedados, int _numb_Tam){
        
       listAgenda[_numb_Tam] = _x_contatos_agedados;
    }
    
}



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package biblioteca_class_exercicios;

/**
 *
 * @author ACER
 */

/// ==============================================================================
/// ARQUIVO - 3

/// CLASSE CONTATO PARA MANTER A INFORMACAO DE ALGUEM COMO UM CONTATO
public class Contatos {
    
    /// ATRIBUTOSB
    private String nome;
    private int numero;
    private String email;
    
    /// CONSTRUTOR
    public Contatos(String nome, int numero, String email){
           this.nome = nome;
           this.numero = numero;
           this.email = email;
    }
    
    public Contatos(){}
    
    /// GET E SET
    public void setNome(String _nome){
        this.nome = _nome;
    }
    
    public void setNumero(int _numb_x){
        this.numero = _numb_x;
    }
    
    public String getNome(){
        return this.nome;
    }
    
    public int getNumero(){
        return this.numero;
    }
    
    public void setEmail(String _email){
        this.email = _email;
    }
    
    public String getEmail(){
        return this.email;
    }
    
}
