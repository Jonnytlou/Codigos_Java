/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package exercicios_java_sala;


import biblioteca_class_exercicios.Gato;
/**
 *
 * @author ACER
 */

/*
33º Crie uma classe "Gato" com os atributos "nome", "cor" e "idade". 
Escreva um método que determine se dois gatos são irmãos ou não, considerando 
que dois gatos são irmãos se tiverem a mesma mãe e o mesmo pai.
*/

/// OS GATOS PAIS SAO GERADOS POR DNA DIFERETNES QUE SAO DISTRIBUIDOS PARA OS FILHOS (DOS QUAIS FILHOS SAO HEREDITARIEDADE)
/// 1 - VERIFICAR SE O FILHOS DOS GATOS PAIS SAO IRMAOS (SENDO QUE NEM SEMOPRE OS PAIS PASSADO SERAO REALMENTE OS PAIS BIOLOGICO) 

/// FUNCAO PRINCIPAL
public class Exercicios_Java_Sala11 {
    
    public static void main(String[] args) {
        
        /// VARIAVEIS PARA A IDADE
        short idadePai = 20;
        short idadeMae = 18;
         
        short idadeFilho1 = 15;
        short idadeFilho2 = 12;
        
        /// INSTANCIANDO OS OBJETOS (PAI, MAE E OS FILHOS)
        Gato gatoMae = new Gato("Perola", "Marrom", idadeMae, "f", "mae");
        Gato gatoPai = new Gato("Kraken", "Branco", idadePai, "m", "pai");
        
        Gato gatofilho1 = new Gato("Cristal", idadeFilho1, "m", gatoPai, gatoMae);
        Gato gatofilho2 = new Gato("Esmeralda", idadeFilho2, "f", gatoPai, gatoMae);
        
        if(gatofilho1.verificarDNA(gatofilho2)){
            
            System.out.println("O gato " + gatofilho1.getNome() + " e irmao do gato " + gatofilho2.getNome());
        }else{
            
            System.out.println("O gato " + gatofilho1.getNome() + " nao e irmao do gato " + gatofilho2.getNome());
        }
    
    }
     
 }
    
    
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package biblioteca_class_exercicios;

/**
 *
 * @author ACER
 */

/// CLASSE GATO
public class Gato {
    
    private String nome;
    private String cor;
    private short idade;
    private String sexo;
    private DNA dna;

    /// PARA FILHOS (AS)
    public Gato(String nome, short idade, String sexo, Gato pai, Gato mae) {
        
        this.sexo = sexo;
        this.nome = nome;
        this.idade = idade;
        dna = new DNA();
        
        /// REPASSANDO A FUSAO DO DNA AO FILHO PELO HERDEIRO
        dna = dna.fusionDNA(pai.getDna(), mae.getDna());
        
        this.cor = dna.getGenes();
    }
    
    /// PARA PAIS (HERDEIROS)
    public Gato(String nome, String cor, short idade, String sexo, String parentesco) {
        
        this.sexo = sexo;
        this.nome = nome;
        this.cor = cor;
        this.idade = idade;
        
        /// RECEBENDO O NOVO DNA
        dna = new DNA(Gato.this, sexo, parentesco);
    }
    
    /// GET
    public String getNome() {
        return nome;
    }

    public String getCor() {
        return cor;
    }

    public short getIdade() {
        return idade;
    }

    public String getSexo() {
        return sexo;
    }

    private DNA getDna() {
        return dna;
    }
    
    /// METEDO PARA VEREFICAR SE O SER E IRMAO OU NAO
    public boolean verificarDNA(Gato x_Gato){
    
        if(x_Gato.getDna().getNumbGenetica() == getDna().getNumbGenetica()){
            return true;
        }
        
        return false;
    }
    
}


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package biblioteca_class_exercicios;

import java.util.Random;

/**
 *
 * @author ACER
 */

/// AGENTES OS QUAIS TRANSMITEM CARACTERISTICAS GENETICAS DE UM SER AO OUTRO
/// CROMOSSOMOS 
/// DNA
/// GENES

 /// CLASSE DNA PARA RECEBER A INFORMACOES DO ANIMAL GATO E DETERMINAR SE A VERIFICACAO DOS GENES E CARACTERISTICAS DO HERDADO
public class DNA {
    
    /// ATRIBUTOS
    private String genes;
    private String cromossomos;
    private double numbGenetica;
    
    /// PARA FILHO
    public DNA(){}
    
    /// PARA PAIS
    public DNA(Gato animal, String sexo, String parentesco){
        
        verificarCromossomos(sexo, parentesco, animal);
    }
    
    /// VERIFICAR ALGUMAS CARACTERISTICAS DO SER
    private void verificarCromossomos(String x_sexo, String x_parentesco, Gato x_animal){
        
        /// SE O SEXO FOR DIFERENTE, ENTAO A FORMACAO DO DNA E OUTRAS CARACTERISTICAS SERA DIFERENTE PARA CADA UM
        if(x_sexo.equalsIgnoreCase("f") && x_parentesco.equalsIgnoreCase("mae")){
            
            cromossomos = "23";
            setGenes(x_animal.getCor());
            Random genetica = new Random();
            numbGenetica = genetica.nextDouble();
        }else if(x_sexo.equalsIgnoreCase("m") && x_parentesco.equalsIgnoreCase("pai")){
            
            cromossomos = "23";
            setGenes(x_animal.getCor());
            Random genetica = new Random();
            numbGenetica = genetica.nextDouble();
            setGenes(x_animal.getCor());
        }
    }
    
    /// GET E SET
    /// METODO PARA ATRIBUIR A COR
    private void setGenes(String caracteristica){
        this.genes = caracteristica;
    }

    public String getGenes() {
        return genes;
    }

    public String getCromossomos() {
        return cromossomos;
    }

    public double getNumbGenetica() {
        return numbGenetica;
    }
    
    /// FUNCAO PARA FUNDIR O DNA E TRANSMITIR AS INFORMACOES PARA O SER FILHO
    public DNA fusionDNA(DNA pai, DNA mae){
        
        /// INSTANCIAR O DNA DO FILHO E UMA RANDOMICA
        DNA filhoDNA = new DNA();
        Random cor = new Random();
        
        /// PROCESSO DE TRANSFERENCIA DE INFORMACAO/CARATERISTICA DOS PAIS AO FILHO
        
            /// DEFININDO A COR DO GATO
            if(cor.nextBoolean() == true){

                filhoDNA.setGenes(pai.getGenes());
            }else{

                filhoDNA.setGenes(mae.getGenes());
            }

            int cromossomosFilho = Integer.parseInt(pai.getCromossomos()) + Integer.parseInt(mae.getCromossomos());
            filhoDNA.cromossomos = String.valueOf(cromossomosFilho);
            
            /// RANDOMICA PARA A GENETICA DO FILHO
            Random genetica = new Random();
            
            /// DEFININDO A GENETICA (SERA A SOMA SE O FILHO E DOS PAIS HERDADOS, SENAO TERA SUA GENETICA DE OUTROS PAIS)
            if(genetica.nextBoolean() == true){

                filhoDNA.numbGenetica = pai.getNumbGenetica() + mae.getNumbGenetica();
            }else{

                filhoDNA.numbGenetica = genetica.nextDouble();
            }
        
        return filhoDNA;
    }

}
